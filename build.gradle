buildscript {
    apply from: 'constants.gradle'

    repositories {
        google()
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.google.gms:google-services:3.2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.5.4'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        mavenCentral()
    }
}

//Skip Javadoc generation for Java 1.8 as it breaks build
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

/**
 * Configure common tasks on all the submodules
 */
allprojects { project ->

    // Get constants, this is where we store things
    // like the list of submodules or the version
    project.apply from: "$rootDir/constants.gradle"

    def isLibrary = 'library'.equals(project.name)
    def isSubmodule = submodules.contains(project.name)

    if (isLibrary || isSubmodule) {
        tasks.whenTaskAdded { task ->
            if (task.name.contains("publish") && task.name.toLowerCase().contains("publication")) {
                task.dependsOn 'assemble'
            }
        }

        // So that we can resolve 'android' variable
        project.apply plugin: 'com.android.library'
        android {
            compileSdkVersion compileSdk
        }

        // Task to generate sources JAR
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        // Task to generate javadoc
        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += configurations.compile
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        // Task to generate javadoc JAR
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        // Define base name for archives
        // Ex: firebase-ui-auth
        archivesBaseName = isSubmodule ? "firebase-ui-${project.name}" : "firebase-ui"

        // Use tasks above to define artifacts
        artifacts {
            archives javadocJar
            archives sourcesJar
        }

        // JFrog Artifactory integration
        project.apply plugin: 'com.jfrog.artifactory'

        // So that we can define publication
        project.apply plugin: 'maven-publish'

        publishing {
            // By passing -Pcustom_local=/some/path and running the
            // publishLibraryPublicationToCustomLocalRepository task you can publish this library to a
            // custom maven repository location on your machine.
            repositories {
                maven {
                    name 'CustomLocal'
                    url uri(project.hasProperty('custom_local') ? project.getProperty('custom_local') : '/tmp/')
                }
            }

            repositories {
                maven {
                    name 'BuildLocal'
                    url "$buildDir/repo"
                }
            }
        }

        // POM to meet maven specs
        def publicationName = isLibrary ? 'monolithLibrary' : "${project.name}Library"
        def archivesBaseName = isLibrary ? 'firebase-ui' : "firebase-ui-${project.name}"

        // We need to override the variables 'group' and 'version' on the 'Project' object in order
        // to prevent the bintray plugin from creating 'unspecified' artifacts.
        group = project.ext.group
        version = project.ext.version

        def groupName = project.ext.group
        def versionName = project.ext.version

        publishing {
            publications {
                "${publicationName}"(MavenPublication) {

                    groupId groupName
                    artifactId archivesBaseName
                    version versionName

                    artifact "$buildDir/outputs/aar/${archivesBaseName}-release.aar"
                    artifact javadocJar
                    artifact sourcesJar

                    pom.withXml {
                        // Dependencies
                        def dependenciesNode = asNode().getAt("dependencies")[0]
                        if (dependenciesNode == null) {
                            dependenciesNode = asNode().appendNode("dependencies")
                        }

                        configurations.api.dependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')

                            if (submodules.contains(it.name)) {
                                dependencyNode.appendNode('groupId', groupName)
                                dependencyNode.appendNode('artifactId', "firebase-ui-${it.name}")
                                dependencyNode.appendNode('version', versionName)
                            } else {
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }

                            dependencyNode.appendNode('scope', 'compile')
                        }
                        configurations.implementation.dependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')

                            if (submodules.contains(it.name)) {
                                dependencyNode.appendNode('groupId', groupName)
                                dependencyNode.appendNode('artifactId', "firebase-ui-${it.name}")
                                dependencyNode.appendNode('version', versionName)
                            } else {
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }

                            dependencyNode.appendNode('scope', 'runtime')
                        }

                        // Common values
                        def repoUrl = 'https://github.com/firebase/FirebaseUI-Android'
                        def scmUrl = 'scm:git:git@github.com/firebase/firebaseui-android.git'

                        // Name
                        asNode().appendNode('name', artifactId)

                        // Description
                        asNode().appendNode('description', 'Firebase UI for Android')

                        // Organization
                        def organization = asNode().appendNode('organization')
                        organization.appendNode('name', 'FirebaseUI')
                        organization.appendNode('url', repoUrl)

                        // URL
                        asNode().appendNode('url', repoUrl)

                        // SCM
                        def scm = asNode().appendNode('scm')
                        scm.appendNode('connection', scmUrl)
                        scm.appendNode('developerConnection', scmUrl)
                        scm.appendNode('url', repoUrl)
                        scm.appendNode('tag', 'HEAD')

                        // Developers
                        def developer = asNode().appendNode('developers').appendNode('developer')
                        developer.appendNode('id', 'samtstern')
                        developer.appendNode('email', 'samstern@google.com')
                        developer.appendNode('organization', 'Firebase')
                        developer.appendNode('organizationUrl', 'https://firebase.google.com')
                        def roles = developer.appendNode('roles')
                        roles.appendNode('role', 'Project-Administrator')
                        roles.appendNode('role', 'Developer')
                        developer.appendNode('timezone', '-8')

                        // Licenses
                        def license = asNode().appendNode('licenses').appendNode('license')
                        license.appendNode('name', 'The Apache License, Version 2.0')
                        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                    }
                }
            }
        }

        def bintrayUsername = hasProperty('BINTRAY_USER') ? getProperty('BINTRAY_USER') : System.getenv('BINTRAY_USER')
        def bintrayKey = hasProperty('BINTRAY_KEY') ? getProperty('BINTRAY_KEY') : System.getenv('BINTRAY_KEY')

        artifactory {
            contextUrl = 'https://oss.jfrog.org'
            publish {
                repository {
                    repoKey = 'oss-snapshot-local'

                    username = bintrayUsername
                    password = bintrayKey
                }
            }
        }

        artifactoryPublish {
            publications(publishing.publications."$publicationName")
        }

        // Bintray Configuration (applies to submodule and the monolith)
        project.apply plugin: 'com.jfrog.bintray'

        def pomLoc = isLibrary ? "$buildDir/publications/monolithLibrary/pom-default.xml" : "$buildDir/publications/${project.name}Library/pom-default.xml"

        bintray {
            user = bintrayUsername
            key = bintrayKey
            publications = [publicationName]

            filesSpec {
                from pomLoc
                into "com/firebaseui/$archivesBaseName/$versionName/"
                rename { String fileName ->
                    "${archivesBaseName}-${versionName}.pom"
                }
            }

            configurations = ['archives']

            pkg {
                repo = 'firebase-ui'
                name = archivesBaseName
                userOrg = 'firebaseui'
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/firebase/FirebaseUI-Android.git'

                version {
                    name = versionName
                }
            }
        }
    }
}

allprojects {
    afterEvaluate { project ->
        def isSubmodule = submodules.contains(project.name)

        if (isSubmodule) {
            // Only applies to submodules, not the library module
            def pomTask = "generatePomFileFor${project.name.capitalize()}LibraryPublication"

            // Convenience task to prepare everything we need for releases
            task prepareArtifacts(dependsOn: [javadocJar, sourcesJar, assembleRelease, pomTask]) {}
        }

    }
}
